<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo命令指南</title>
    <url>/post/400a6e47.html</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-none"><code class="language-none">npm install hexo -g #安装Hexo
npm update hexo -g #升级
hexo init #初始化博客<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>matery github仓库<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">介绍</a><br>Yafine大佬 Hexo+github搭建<a href="https://yafine-blog.cn/posts/4ab2.html">博客</a>(超级详细版，精细入微)</p>
<h2 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h2><pre class="line-numbers language-none"><code class="language-none">hexo n "我的博客" == hexo new "我的博客" #新建文章
hexo g == hexo generate #生成
hexo s == hexo server #启动服务预览
hexo d == hexo deploy #部署

hexo server #Hexo会监视文件变动并自动更新，无须重启服务器
hexo server -s #静态模式
hexo server -p 5000 #更改端口
hexo server -i 192.168.1.1 #自定义 IP
hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="博客-Font-Master"><a href="#博客-Font-Master" class="headerlink" title="博客 Font Master"></a>博客 Font Master</h2><pre class="line-numbers language-none"><code class="language-none">title: typora-vue-theme主题介绍
date: 2018-09-07 09:25:00
author: 赵奇
img: /source/images/xxx.jpg
top: true
cover: true
coverImg: /images/1.jpg
password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92
toc: false
mathjax: false
summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要
categories: Markdown
tags:
  - Typora
  - Markdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Hexo优化"><a href="#Hexo优化" class="headerlink" title="Hexo优化"></a>Hexo优化</h2><p>添加valine评论邮箱提醒 <a href="https://deserts.io/valine-admin-document/">链接</a></p>
<p>添加说说  <a href="https://notes.zhangxiaocai.cn/posts/7404e01a.html">链接</a></p>
<p>更多 <a href="https://blog.sky03.cn/posts/42790.html#toc-heading-18">链接</a></p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基本语法之作用域</title>
    <url>/post/76206bf9.html</url>
    <content><![CDATA[<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul>
<li>JavaScript作用域：就是变量在某个范围内起作用，目的是为了提高程序的</li>
<li>全局作用域 ：整个script标签</li>
<li>局部作用域：在函数内部</li>
</ul>
<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><blockquote>
<p>类似C/C++ 中的全局变量和局部变量</p>
</blockquote>
<ul>
<li>全局变量： 在全局作用域中的变量<ul>
<li>在函数内未声明的变量也为全局变量      </li>
</ul>
</li>
<li> 局部变量： 在局部作用域下的变量</li>
<li>执行效率：<ul>
<li>全局变量浏览器关闭才会销毁，比较占内存</li>
<li>局部变量在函数结束时才会销毁</li>
</ul>
</li>
<li>JS中没有块级作用域 { }  // if {}   for {]}</li>
</ul>
<h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><blockquote>
<p>内部函数访问外部函数的变量，采取的是链式查找的方式</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基本语法之函数</title>
    <url>/post/877bf8ef.html</url>
    <content><![CDATA[<h2 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h2><p>函数就是封装了一段可以重复被调用的代码块</p>
<h2 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h2><ul>
<li>函数声明：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">function () {  //function 为声明函数的关键字  //全部小写
   action;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>函数调用： 函数名()  fun( )</li>
</ul>
<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><ul>
<li><p>形参：在声明函数小括号里面的参数是形参</p>
</li>
<li><p>实参：在函数调用小括号里面的参数是实参</p>
</li>
<li><p>实参和形参匹配</p>
<ul>
<li>如果实参个数等于形参个数，输出正常结果</li>
<li>如果实参个数大于形参个数，会取到形参的个数</li>
<li>如果实参个数小于形参个数，多余的参数为NaN</li>
</ul>
</li>
</ul>
<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><ul>
<li>如果有return，则返回return后面的值</li>
<li>如果没有return，则返回undefined</li>
</ul>
<h2 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h2><ul>
<li>arguments存放了传递的所有实参</li>
<li>arguments是一种 == 伪数组 ==<ul>
<li>具有数组的length属性</li>
<li>按照索引的方式进行存储</li>
<li>它没有真实数组的一些方法   //pop</li>
</ul>
</li>
</ul>
<h2 id="函数的两种声明方式"><a href="#函数的两种声明方式" class="headerlink" title="函数的两种声明方式"></a>函数的两种声明方式</h2><ul>
<li><p>利用函数关键字自定义函数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>函数表达式</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// func 是变量名，不是函数名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基本语法之对象</title>
    <url>/post/686ee723.html</url>
    <content><![CDATA[<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>在JavaScript中，对象是一组无序的相关属性和方法的集合，如字符串，数值，数组，函数等.</p>
<p>对象是由属性和方法组成的</p>
<ul>
<li>属性：对象的特征</li>
<li>方法：事物的行为</li>
</ul>
<h2 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h2><ol>
<li><p>利用字面量创建对象 { }</p>
<ol>
<li>其中属性或方法采用键值对的形式</li>
<li>多个属性或方法之间用逗号隔开</li>
<li>方法后面跟的是一个匿名函数 </li>
<li>调用对象的属性 对象名.属性名  或  对象名[‘属性名’]</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>； <span class="token comment">//  创建一个空对象</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> 
	name<span class="token operator">:</span> linxueya<span class="token punctuation">,</span>
	age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token function-variable function">sayhi</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>利用new object() 方法创建属性 </p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建了一个空的对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>利用构造函数创建对象</p>
<p> 构造函数：把对象里面一些相同的属性和方法抽象出来封装导函数里面</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>属性 <span class="token operator">=</span> 值；
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">方法</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
</ol>
<h2 id="变量、属性、函数和方法的区别"><a href="#变量、属性、函数和方法的区别" class="headerlink" title="变量、属性、函数和方法的区别"></a>变量、属性、函数和方法的区别</h2><ul>
<li>变量：单独声明赋值，单独存在</li>
<li>属性：对象里面的变量称为属性，不需要声明，用来描述该对象的特征</li>
<li>函数：单独存在的，通过函数名调用</li>
<li>方法：对象里的函数称为方法，方法不需要声明，通过对象名.函数名的方法调用</li>
</ul>
<h2 id="New关键字"><a href="#New关键字" class="headerlink" title="New关键字"></a>New关键字</h2><p>New关键字执行过程</p>
<ol>
<li>New 构造函数可以在内存中创建一个空的对象</li>
<li>this 就会指向刚才创建的空对象</li>
<li>执行构造函数里面的代码，给这个空对象添加属性和方法</li>
<li>返回这个对象</li>
</ol>
<h2 id="遍历对象属性"><a href="#遍历对象属性" class="headerlink" title="遍历对象属性"></a>遍历对象属性</h2><ul>
<li><p>for in 遍历对象</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> linxueya<span class="token punctuation">,</span>
	age<span class="token operator">:</span> <span class="token number">18</span>
	sex<span class="token operator">:</span> 男
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出属性名</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obk<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// obj[k] 输出属性值</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
</ul>
<h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><ul>
<li><p>内置对象就是JS语言自带的一些对象，这些对象供开发者使用，并提供了一些基础而必要的方法和属性</p>
</li>
<li><p>如何学习对象中的方法   <a href="https://developer.mozilla.org/zh-CN/">MDN</a></p>
<ol>
<li>查阅该方法的功能</li>
<li>查看里面参数的意义和类型</li>
<li>查看返回值的意义和类型</li>
<li>通过demo进行测试</li>
</ol>
</li>
</ul>
<h2 id="MATH对象"><a href="#MATH对象" class="headerlink" title="MATH对象"></a>MATH对象</h2><p>​    Math 是一个对象不是构造函数</p>
<ul>
<li><p>Math 对象随机数方法 random( )</p>
</li>
<li><p>得到两个数之间的随机整数，并且包含这两个整数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span>min <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>随机取数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


</li>
</ul>
<h2 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h2><p> Date() 是一个构造函数，必须使用new来调用</p>
<ul>
<li>使用 如果没有参数，则返回系统的当前时间</li>
<li>参数常用的写法 数字型 2019,10,1 ；或者是字符串型 ‘2019-10-1 8:8:8’</li>
<li>返回的月份，日期，星期比正常小1  </li>
</ul>
<p>通过Date() 获取总的毫秒数</p>
<ul>
<li>valueOf()  getTime()  +new Date()    Date.now() </li>
</ul>
<h2 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h2><ul>
<li>数组可以通过字面量和new Array() 来创建 </li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//创建一个空的数组</span>
<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//创建一个长度为2的数组</span>
<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//等价于 [2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>instanceof / isArray() 运算符 检测是否为数组</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><p>添加 删除数组元素的方法</p>
<p>push()  /   pop()</p>
</li>
<li><p>数组翻转 reverse() ;    排序  sort( );  数组索引 indexOf();  数组转换为字符串 toString()  join()   // 分隔符;   数组拼接 concat();    数组截取 slice(begin,end ) 数组删除 splice(第几个开始，删除的个数);</p>
</li>
</ul>
<h2 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h2><p>基本包装类型，就是把简单数据类型包装为复杂数据类型 </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'andy'</span><span class="token punctuation">;</span>

<span class="token comment">//等价于</span>
<span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'andy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
str <span class="token operator">=</span> temp<span class="token punctuation">;</span>
temp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>字符串的不可变：指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变量，内存中开辟了一个新的内存空间</p>
<p>字符串相关方法： </p>
<ul>
<li><p>返回字符串索引，indexOf(‘要查找的字符’，[其实的位置]) ; </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//查找字符串中所有o出现的次数</span>
<span class="token keyword">var</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
	index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>根据位置返回字符 ，str.charAt(index)   str[index]  // H5 新增;返回指定位置字符的ASCII码   str.charCodeAt(index) ;  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 找出字符串中出现最多的字符,统计其出现的次数</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcoefoxyozzopp'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> o<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span> o<span class="token punctuation">[</span>chars<span class="token punctuation">]</span><span class="token punctuation">)</span> o<span class="token punctuation">[</span>chars<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> o<span class="token punctuation">[</span>chars<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span>  o<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>
        max <span class="token operator">=</span> o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>字符串操作：拼接字符串concat(str1,str2,str3…) 截取字符串  substr(start,length)  ; slice(start,end)     substring(start,end) ；  替换字符串replace(char1 char2);   字符串转换为数组 split(‘分隔符’)   // join   把数组转换为字符串；</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基本语法之预解析</title>
    <url>/post/3df1188b.html</url>
    <content><![CDATA[<h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1  num is not defined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2 undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">// 3</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 4  Uncaught TypeError: fn is not a function</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>JS引擎运行JS代码分为两步</p>
<ul>
<li><p>预解析。预解析可以</p>
</li>
<li><p>代码执行</p>
</li>
</ul>
</li>
<li></li>
</ul>
<h2 id="变量预解析和函数预解析"><a href="#变量预解析和函数预解析" class="headerlink" title="变量预解析和函数预解析"></a>变量预解析和函数预解析</h2><ol>
<li>变量预解析,就是把变量声明提到当前函数作用域最前面，不提升复制操作</li>
<li>函数与解析，就是把函数声明提到当前函数作用域最前面，不调用函数</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">// 相当于执行了以下代码：</span>
<span class="token keyword">var</span> num；
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 相当于执行了以下代码：</span>
<span class="token keyword">var</span> fn；
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><pre class="line-numbers language-none"><code class="language-none">f1();
console.log(c);
console.log(b);
console.log(a);
function f1() {
	var a = b = c = 9;
	console.log(a);
	console.log(b);
	console.log(c);
}
// 输出为 9 9 9 9 9 error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>valine添加邮箱提醒</title>
    <url>/post/eadbc16a.html</url>
    <content><![CDATA[<p>Valine 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。</p>
<p>理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。</p>
<div class="note info">本教程基于Hexo，并且默认已完成valine的搭建，本教程基于LeanCloud国际版。另外本教程基于  https://deserts.io/valine-admin-document/</div>

<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>在创建的应用中，打开设置-&gt;云引擎-WEB-&gt;设置-&gt;自定义环境变量；在此处添加环境变量，环境变量的说明参考原<a href="https://deserts.io/valine-admin-document/">教程</a>。所使用的邮箱需要开通SMTP_PASS服务，SMTP_PASS使用授权码。（此处最好不好使用QQ邮箱，题主在使用QQ邮箱时老是报错。）</p>
<p><img src="https://gitee.com/linxueya/pic-bed/raw/master/img/valine.png"></p>
<h2 id="配置云引擎域名"><a href="#配置云引擎域名" class="headerlink" title="配置云引擎域名"></a>配置云引擎域名</h2><p>云引擎域名主要用于评论的后台管理。请把云引擎域和站点域名区分开来。在设置-&gt;域名绑定中添加云引擎域名。同时添加域名解析。</p>
<p>以题注的配置为例，我绑定的域名为comment.linxueya.cn，则DNS的解析为：</p>
<p><img src="https://gitee.com/linxueya/pic-bed/raw/master/img/dns1.png"></p>
<div class="note info">注意不要将此处的主机记录更改为comment.linxueya.cn https://deserts.io/valine-admin-document/</div>


<h2 id="部署云引擎"><a href="#部署云引擎" class="headerlink" title="部署云引擎"></a>部署云引擎</h2><p>切换到 云引擎-&gt;部署，部署模式选择 部署项目-&gt;Git部署，分支「master」，手动部署目标环境为「生产环境」在Leancloud云引擎设置界面，填写代码库并保存：<a href="https://github.com/DesertsP/Valine-Admin.git%EF%BC%8C%E5%8D%B3%E5%8F%AF%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E3%80%82">https://github.com/DesertsP/Valine-Admin.git，即可一键部署。</a></p>
<p><img src="https://cloud.panjunwen.com/2020/10/deploy4.png"></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ul>
<li>站点评论截图</li>
</ul>
<p><img src="https://gitee.com/linxueya/pic-bed/raw/master/img/valine-show1.png"></p>
<ul>
<li>邮箱提醒</li>
</ul>
<p><img src="https://gitee.com/linxueya/pic-bed/raw/master/img/valine-show2.png"></p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>评论管理、定时任务和邮箱模板 等设置均基于 <a href="https://deserts.io/valine-admin-document/">原教程</a></p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>鲸鱼</title>
    <url>/post/ab725d99.html</url>
    <content><![CDATA[<h2 id="2021辽宁春晚"><a href="#2021辽宁春晚" class="headerlink" title="2021辽宁春晚"></a>2021辽宁春晚</h2><main class="content">
    <div class="container">
        <div class="card">
            <div class="card-content">
                <div style="position: relative; padding: 30% 45%;"> 
                    <iframe style=" position: absolute;
                        width: 100%; 
                        height: 100%; 
                        left: 0;
                        top: 0;" src="//player.bilibili.com/player.html?aid=204129921&amp;bvid=BV1kh411C7EE&amp;cid=296074833&amp;page=2&amp;high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> 
                        </iframe>
                </div>
            </div>
        </div>
    </div>
</main>]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>star</tag>
      </tags>
  </entry>
  <entry>
    <title>Web APIs</title>
    <url>/post/c0110283.html</url>
    <content><![CDATA[<ul>
<li><p><input disabled="" type="checkbox">  能够说出什么是DOM</p>
</li>
<li><p><input disabled="" type="checkbox">  能够获取页面元素</p>
</li>
<li><p><input disabled="" type="checkbox">  能够元素注册事件</p>
</li>
<li><p><input disabled="" type="checkbox">  能够操作DOM元素的属性</p>
</li>
<li><p><input disabled="" type="checkbox">  能够创建元素</p>
</li>
<li><p><input disabled="" type="checkbox">  能够操作DOM节点</p>
</li>
</ul>
<p>API是我们程序员提供的一个接口，帮助我们实现某种功能，但我们不必纠结其内部实现。而Web API主要是针对于浏览器提供的接口，主要用于浏览器实现交互效果。</p>
<h2 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h2><p>文档对象模型是W3C组织推荐的处理HTML的标准编程接口。</p>
<p>W3C已经定义了一些DOM接口，通过这些DOM接口可以改变网页的内容样式和结构</p>
<p><img src="https://cdn.linxueya.cn/img/20210220155327.png"></p>
<p>文档：一个页面就是一个文档，DOM中使用document表示</p>
<p>元素：页面中所有的标签都是元素，DOM中使用element表示</p>
<p>节点：网页中所有的内容都是节点（标签，属性，文本，注释等），DOM中使用node表示</p>
<h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><ul>
<li><p>根据ID获取：getElementById()</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>2021<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">var</span> timer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
<li><p>根据标签名获取 getElementsByTagName()</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>hello,world!1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>hello,world!2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>hello,world!3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token comment">// 返回的是一个对象的集合，得到的元素是动态的</span>
        <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 当存在多个标签时u，可以结合ID来选择 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>hello,world!1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>hello,world!2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>hello,world!3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>how are you 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>how are you 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>how are you 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">var</span> nav <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'nav'</span><span class="token punctuation">)</span>
        <span class="token keyword">var</span> lis <span class="token operator">=</span> nav<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
<li><p>通过==HTML5==新增的方法获取 </p>
<ol>
<li>getElementsByClassName 根据类名获取元素</li>
<li>querySelector 返回选择器的第一个元素对象</li>
<li>querySelectorAll  返回选择器所有的元素对象</li>
</ol>
</li>
<li><p>特殊元素获取</p>
<ol>
<li>获取html元素，body元素</li>
</ol>
</li>
</ul>
<h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><p>事件概述：JavaScript使我们有能力创建动态页面。</p>
<p>事件由三部分组成，事件源、 事件类型和事件处理程序</p>
<ul>
<li>事件源： 事件触发的对象 </li>
<li>事件类型： 如何触发 什么事件 比如鼠标点击</li>
<li>事件处理程序：通过函数赋值的程序 完成</li>
</ul>
<p><img src="https://cdn.linxueya.cn/img/shijain-mouse.png"></p>
<p>执行事件步骤</p>
<ul>
<li>获取事件源</li>
<li>绑定事件 注册事件 </li>
<li>添加事件处理程序</li>
</ul>
<h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><h3 id="改变元素内容：-element-innerText-和-element-innerHTML（W3C标准-保留换行和空格）"><a href="#改变元素内容：-element-innerText-和-element-innerHTML（W3C标准-保留换行和空格）" class="headerlink" title="改变元素内容： element.innerText 和 element.innerHTML（W3C标准 保留换行和空格）"></a>改变元素内容： element.innerText 和 element.innerHTML（W3C标准 保留换行和空格）</h3><p>案例：通过鼠标点击获取时间  <a href="https://cdn.linxueya.cn/code/web/web-api/1.html">效果</a></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>获取时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> y <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> m <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> d <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> h <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> min <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> s <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> text <span class="token operator">=</span> y<span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>m<span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>d<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>h<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>min<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>s<span class="token punctuation">;</span>
    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> out <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'out'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        out<span class="token punctuation">.</span>innerText <span class="token operator">=</span> text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="改变常见元素属性：src、href、-id、alt和title"><a href="#改变常见元素属性：src、href、-id、alt和title" class="headerlink" title="改变常见元素属性：src、href、 id、alt和title"></a>改变常见元素属性：src、href、 id、alt和title</h3><p>案例：分时显示不同图片， 不同问候语 。 <a href="https://cdn.linxueya.cn/code/web/web-api/2.html">效果</a></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/s.gif<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>img<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getHours<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>h <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'./images/s.gif'</span><span class="token punctuation">;</span>
        text<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'上午好'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>h <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'./images/z.gif'</span><span class="token punctuation">;</span>
        text<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'中午好'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'./images/w.gif'</span><span class="token punctuation">;</span>
        text<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'晚上好'</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="改变-表单-的属性：type、value、checked、selected、disabled"><a href="#改变-表单-的属性：type、value、checked、selected、disabled" class="headerlink" title="改变==表单==的属性：type、value、checked、selected、disabled"></a>改变==表单==的属性：type、value、checked、selected、disabled</h3><p>案例：查看明文密码   <a href="https://cdn.linxueya.cn/code/web/web-api/3.html">效果</a></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/close.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">'</span>eye<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">'</span>pwd<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> eye <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'eye'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    eye<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            pwd<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text'</span><span class="token punctuation">;</span>
            eye<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'./images/open.png'</span><span class="token punctuation">;</span>
            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            pwd<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'password'</span><span class="token punctuation">;</span>
            eye<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'./images/close.png'</span><span class="token punctuation">;</span>
            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="改变元素的大小、颜色、位置等"><a href="#改变元素的大小、颜色、位置等" class="headerlink" title="改变元素的大小、颜色、位置等"></a>改变元素的大小、颜色、位置等</h3><div class="note info">JS修改style样式操作,产生的是行内样式，权重比较高</div>

<ul>
<li>element.style  样式比较少或功能比较少的情况下适用</li>
<li>element.className  </li>
<li>如果想保留原先的类名，可以使用多类名选择器 </li>
</ul>
<p>案例：关闭淘宝二维码  <a href="https://cdn.linxueya.cn/code/web/web-api/4.html">效果</a></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    淘宝二维码
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/tao.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    btn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>案例：密码框格式提示错误信息 <a href="https://cdn.linxueya.cn/code/web/web-api/5.html">效果</a></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>mess<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>请输入6-12位密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.mess'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    btn<span class="token punctuation">.</span><span class="token function-variable function">onblur</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> len <span class="token operator">=</span> btn<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token operator">||</span> len <span class="token operator">&gt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"mess wrong"</span><span class="token punctuation">;</span>
            p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'您输入的位数不对要求6~16位'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"mess right"</span><span class="token punctuation">;</span>
            p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'输入正确'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="排它思想"><a href="#排它思想" class="headerlink" title="排它思想"></a>排它思想</h3><p>案例：百度换肤</p>
<p>案例：全选与取消</p>
<p>获取属性值</p>
<ul>
<li>element.属性   //内置属性</li>
<li>element.getAttribute(‘属性 ‘)  //程序员自定义属性 </li>
</ul>
<p>设置属性值</p>
<ul>
<li>element.属性 = 值</li>
<li>element.setAttribute(‘属性’， ‘值’) </li>
</ul>
<p>移除属性</p>
<ul>
<li>element.removeAttribute(‘属性 ‘) </li>
</ul>
<p>案例：tab栏切换 （重点）</p>
<p>H5自定义属性 ==data-属性== ，dataset存放着所有以data-开头的数据，dataset[‘属性’] 或者 dataset.属性 （ie11 以上）</p>
<h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p><del>利用DOM提供的方法获取元素逻辑性不清，繁琐</del></p>
<p>网页中所有的内容都是节点（标签，属性，文本，注释），在DOM中，节点使用node来表示。一般地，节点至少拥有节点类型，节点名称，节点值这三个属性。</p>
<p>子节点</p>
<ul>
<li>获取所有子节点   node.childNodes</li>
<li>获取子元素节点   node.children</li>
<li>第一个节点   node.firstChild  </li>
<li>第一个元素节点  node.firstElenmentChild （ie9 以上）</li>
<li>第一个元素节点(开发中使用) node.children[0]</li>
</ul>
<p>案例：下拉菜单</p>
<p>兄弟节点</p>
<ul>
<li><p>下一个兄弟节点   node.nextSibling</p>
</li>
<li><p>下一个兄弟元素节点  node.nextElementSibling</p>
</li>
</ul>
<p>创建元素节点  document.createElement( )</p>
<p>添加节点  node.append( )   or   node.insertBefore(child,指定元素)</p>
<p>案例： 简易发布留言</p>
<p>删除节点  node.removeChild()</p>
<p>案例：删除留言</p>
<p>复制接点  node.cloneNode() 如果括号为空或者为false，则为浅拷贝，只复制标签不复制内容；如果为true，则为深拷贝 </p>
<p>案例：动态生成表格</p>
<p>三种动态创建元素方式的区别</p>
<ul>
<li>document.write()  如果页面文档加载完毕，会重绘页面</li>
<li>document.innerHTML   通过拼接插入多个元素   效率低   通过数组插入元素 效率高</li>
<li>document.createElement  效率较高  结构清晰</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5+CCS3</title>
    <url>/post/47f7d4a9.html</url>
    <content><![CDATA[<h2 id="新增语义化标签"><a href="#新增语义化标签" class="headerlink" title="新增语义化标签"></a>新增语义化标签</h2><ul>
<li>header 头部标签</li>
<li>nav 导航标签</li>
<li>article 内容标签</li>
<li>section 块级标签</li>
<li>aside 侧标栏标签</li>
<li>footer 尾部标签</li>
</ul>
<p>*pc端存在兼容问题，HTML5主要应用在移动端</p>
<h2 id="H5新增多媒体标签"><a href="#H5新增多媒体标签" class="headerlink" title="H5新增多媒体标签"></a>H5新增多媒体标签</h2><ul>
<li>音频 &lt;audio<ul>
<li>音频格式 ogg,MPEG 3,wav </li>
<li>常见属性：controls, autoplay,loop,src</li>
</ul>
</li>
<li>视频 &lt;video<ul>
<li>视频格式 ogg, MPEG 4,web</li>
<li>在谷歌浏览器中添加静音属性来自动播放</li>
</ul>
</li>
</ul>
<h2 id="新增表单标签"><a href="#新增表单标签" class="headerlink" title="新增表单标签"></a>新增表单标签</h2><ul>
<li>input <ul>
<li>email,url,date,time,month,week,number,tel,search,color</li>
</ul>
</li>
<li>属性<ul>
<li>==placeholder==，占位符</li>
<li>autofocus，自动聚焦，鼠标定位到输入框</li>
<li>==multiple==，多分件提交</li>
<li>autocomplete，保留输入历史纪录</li>
</ul>
</li>
</ul>
<h1 id="CCS3"><a href="#CCS3" class="headerlink" title="CCS3"></a>CCS3</h1><h2 id="CCS3属性选择器"><a href="#CCS3属性选择器" class="headerlink" title="CCS3属性选择器"></a>CCS3属性选择器</h2><ul>
<li>E[attr] 选择具有att属性的E元素<ul>
<li>button[disable] 选择的既有button属性又有disable属性</li>
</ul>
</li>
<li>==类选择器、属性选择器、伪类选择器权重为10==</li>
<li>E[att=”val”] 选择具有att属性，且属性值等于val的E元素</li>
<li>E[att^=”val”] 选择具有att属性，且属性值以val开头的E元素</li>
<li>E[att$=”val”] 选择具有att属性，且属性值以val结尾的E元素</li>
<li>E[att*=”val”] 选择具有att属性，且属性值中含有val的E元素</li>
</ul>
<h2 id="CCS3结构伪类选择器"><a href="#CCS3结构伪类选择器" class="headerlink" title="CCS3结构伪类选择器"></a>CCS3结构伪类选择器</h2><ul>
<li>E:first-child 匹配父元素中的第一个子元素E</li>
<li>E:nth-child(n) 匹配父元素中的第n个子元素E<ul>
<li>==n可以是数字、关键字或者公式==</li>
<li>常见关键字 even偶数，odd奇数</li>
<li>如果n是公式，则从零开始计算</li>
</ul>
</li>
</ul>
<h2 id="CCS-3伪元素选择器（两个冒号）"><a href="#CCS-3伪元素选择器（两个冒号）" class="headerlink" title="CCS 3伪元素选择器（两个冒号）"></a>CCS 3伪元素选择器（两个冒号）</h2><ul>
<li>::before(清除浮动)在元素内部前面插入内容</li>
<li>::after 在元素内部后面插入内容<ul>
<li>before和after必须有content属性</li>
<li>创建的元素属于行内元素</li>
<li>在dom看不见创建的元素，所以被称作伪元素</li>
<li>==伪元素和标签选择器一样，权重为1==</li>
</ul>
</li>
</ul>
<h2 id="CCS3-2D转换"><a href="#CCS3-2D转换" class="headerlink" title="CCS3 2D转换"></a>CCS3 2D转换</h2><h4 id="2D转换之移动"><a href="#2D转换之移动" class="headerlink" title="2D转换之移动"></a>2D转换之移动</h4><ul>
<li>transform:translate(x,y) 参数可以是像素值，也可以是百分比，如果里面的参数是%，移动的距离是盒子自身的宽度或者高度</li>
<li>==之前使用position定位时，用margin-top居中，在CCS3中可以直接使用top和translate(-50%,50%)组合==</li>
</ul>
<h4 id="2D转换之旋转"><a href="#2D转换之旋转" class="headerlink" title="2D转换之旋转"></a>2D转换之旋转</h4><ul>
<li>transform:routate(n==deg==)</li>
<li>案列：鼠标悬浮图片旋转，在hover中写旋转，在本身写过渡   ==过渡写在本身上，谁做动画给谁加==</li>
<li>案例：三角形，保留盒子的两条边，再将盒子旋转</li>
</ul>
<h4 id="2D转换中心点"><a href="#2D转换中心点" class="headerlink" title="2D转换中心点"></a>2D转换中心点</h4><ul>
<li>transform-origion:x y;<ul>
<li>x y默认转换的中心点是元素的中心点</li>
<li>还可以设置像素或者方位名词（top，bottom等）</li>
</ul>
</li>
<li>案例：旋转（鼠标悬浮，切换盒子）</li>
</ul>
<h4 id="2D转换之缩放"><a href="#2D转换之缩放" class="headerlink" title="2D转换之缩放"></a>2D转换之缩放</h4><ul>
<li>transform:scale(x,y) 里面的数字是倍数的意思<ul>
<li>直接修改高度和宽度，==会影响其他盒子==</li>
<li>scale能设置缩放中心点，向四周扩散</li>
</ul>
</li>
<li>案例：图片放大（鼠标悬浮，图片放大）</li>
<li>案列：分页按钮</li>
</ul>
<h4 id="2D转换综合写法"><a href="#2D转换综合写法" class="headerlink" title="2D转换综合写法"></a>2D转换综合写法</h4><ul>
<li>同时使用多个转换，其格式为transform:translate() rotate() scale()</li>
<li>其顺序会影响转换的效果（先旋转会改变坐标轴方向）</li>
<li>==当我们同时有位移和其他属性时，位移放在最前面==</li>
</ul>
<h2 id="CCS3动画"><a href="#CCS3动画" class="headerlink" title="CCS3动画"></a>CCS3动画</h2><blockquote>
<p>相比于过渡，动画可以实现更多变化，更多控制，连续播放等效果</p>
</blockquote>
<ul>
<li><p>from和to等价于 0%和100%</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">@keyframe 动画名称 { 
    0% { 表示第0帧
        
    }
    100% {
        
    }
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>animation 属性</p>
<ul>
<li>animation-name 动画名称</li>
<li>animation-duration 完成时间</li>
<li></li>
</ul>
</li>
<li><p>animation 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态</p>
</li>
<li><p>运动曲线细节</p>
<ul>
<li>linear 动画从头到尾运动的速度是相同的</li>
<li>ease 动画开始慢，中间快，后来慢</li>
<li>step(s) 指定动画分几步完成</li>
</ul>
</li>
<li><p>案例 hotmap</p>
</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
        <span class="token selector">body</span> <span class="token punctuation">{</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token selector">.map</span> <span class="token punctuation">{</span>
            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> 747px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 616px<span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./img/map.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>

            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token selector">.city</span> <span class="token punctuation">{</span>
            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
            <span class="token property">top</span><span class="token punctuation">:</span> 226px<span class="token punctuation">;</span>
            <span class="token property">right</span><span class="token punctuation">:</span> 193px<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token selector">.dotted</span> <span class="token punctuation">{</span>
            <span class="token property">width</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
            <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> #9ff<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token selector">.city div[class^="pop"]</span> <span class="token punctuation">{</span>
            <span class="token comment">/* 保证我们小波纹在父盒子里面水平垂直居中 放大之后就会中心向四周发散 */</span>
            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
            <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
            <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 12px #9f9ffd<span class="token punctuation">;</span>
            <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
            <span class="token comment">/* animation: name duration timing-function delay iteration-count direction fill-mode; */</span>
            <span class="token comment">/* animation: pop 1.5s linear infinite; */</span>
        <span class="token punctuation">}</span>
        <span class="token selector">.city div.pop2</span> <span class="token punctuation">{</span>
            <span class="token property">animation-delay</span><span class="token punctuation">:</span> 0.4s<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token selector">.city div.pop3</span> <span class="token punctuation">{</span>
            <span class="token property">animation-delay</span><span class="token punctuation">:</span> 0.8s<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token atrule"><span class="token rule">@keyframes</span> pop</span><span class="token punctuation">{</span>
            <span class="token selector">0%</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>
            <span class="token selector">70%</span> <span class="token punctuation">{</span>
                <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
                <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
                <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token selector">100%</span> <span class="token punctuation">{</span>
                <span class="token property">width</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>
                <span class="token property">height</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>
                <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dotted<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pop1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pop2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pop3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="CCS3-3D转换"><a href="#CCS3-3D转换" class="headerlink" title="CCS3  3D转换"></a>CCS3  3D转换</h2><ul>
<li><p>特点：近大远小</p>
</li>
<li><p>3D位移: translate3d(x,y,z)</p>
<ul>
<li>translateZ沿着Z轴移动，单位为px </li>
</ul>
</li>
<li><p>3D旋转: rotate3d(x,y,z)</p>
</li>
<li><p>透视: perspective</p>
<ul>
<li>==透视写在被观察元素的父盒子上面== </li>
<li><img src="https://gitee.com/linxueya/pic-bed/raw/master/img/20210117200401.png"></li>
<li>d表示眼睛距离屏幕的距离，z表示物体距离屏幕的距离</li>
</ul>
</li>
<li><p>3D呈现 transform-style</p>
<ul>
<li>控制子元素以3D空间显示</li>
<li>transform-style:preserve-3d</li>
</ul>
</li>
<li><p>案例：两面翻转的盒子</p>
<ul>
<li><p>box为翻转的盒子，front为前面的盒子，back为后面的盒子。</p>
</li>
<li><p>ccs样式</p>
<ul>
<li>box指定大小，切记要添加3D呈现</li>
<li>back盒子要沿着y轴翻转180deg</li>
<li>最后鼠标经过，box沿着y轴旋转180deg</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>front<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>back<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>案例：3D导航栏</p>
</li>
<li><p>案例：旋转木马</p>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Web-APIs2</title>
    <url>/post/d23a6e4b.html</url>
    <content><![CDATA[<ul>
<li><p><input disabled="" type="checkbox">  能够写出元素注册事件的两种方式</p>
</li>
<li><p><input disabled="" type="checkbox">  能够说出删除事件的两种方式</p>
</li>
<li><p><input disabled="" type="checkbox">  能够说出DOM事件流的三个阶段</p>
</li>
<li><p><input disabled="" type="checkbox">  能够利用事件对象完成跟随鼠标案例</p>
</li>
<li><p><input disabled="" type="checkbox">  能够封装阻止冒泡的兼容性函数</p>
</li>
<li><p><input disabled="" type="checkbox">  能够说出事件委托的原理</p>
</li>
<li><p><input disabled="" type="checkbox">  能够说出常用的鼠标和键盘事件</p>
</li>
</ul>
<h2 id="注册事件（绑定事件）"><a href="#注册事件（绑定事件）" class="headerlink" title="注册事件（绑定事件）"></a>注册事件（绑定事件）</h2><p>传统注册方式：同一个元素同一个时间只能设置一个处理函数，最后的注册的处理函数会覆盖前面注册的处理函数。</p>
<p>方法监听注册事件：W3C推荐方式，addEventListener (‘事件’，函数名)。同一个事件 同一个元素可以添加多个事件处理程序。//attachEvent   (IE9 之前)</p>
<h2 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h2><p>应用：事件处理函数只触发一次</p>
<p>传统方式：node.事件 = null</p>
<p>移除监听事件： removeEventListener (‘事件’，函数名)   //detachEvent   (IE9 之前)</p>
<h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p>事件流描述的时从页面接收事件的顺序。事件发生时会在元素节点之间按照特定的顺序传播，这个传播的过程即DOM事件流。</p>
<p><img src="https://cdn.linxueya.cn/img/shijian-flow.png"></p>
<p>DOM事件流分为三个阶段：1.捕获阶段   2.当前目标阶段   3.冒泡阶段</p>
<ul>
<li>捕获阶段：father -&gt; son</li>
<li>冒泡阶段:  son -&gt; father   (实际开发中使用多)</li>
</ul>
<!--JS代码中只能执行捕获或者冒泡阶段-->

<p>onclick 和 attachEvent 只能得到冒泡事件</p>
<p>addEventListener 第三个参数为true 时使用捕获，为 false时使用冒泡</p>
<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>div.onclick = function(event){}   </p>
<p>div.addEventListener(‘click’,fn(event))</p>
<p>event  就是一个事件对象，可以当做形参来看。它是系统创建的，不需要我们传递参数。事件对象是一系列相关数据的集合。</p>
<p>兼容性问题： IE678  通过window.event   e = e || window.event</p>
<p>事件对象常用属性</p>
<p><img src="https://cdn.linxueya.cn/img/shijian-obj.png"></p>
<ul>
<li><p>e.target  返回触发事件的对象   //兼容性    var target = e.target   || e.srcElement</p>
</li>
<li><p>this 返回绑定元素的对象</p>
</li>
</ul>
<h2 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h2><p>事件冒泡的特性，会带来好处，也会带来坏处，需要我们灵活掌握。</p>
<p>标准写法：利用事件对象里面的stopPropagation()</p>
<p>兼容性：cancelBubble  //IE 6-8</p>
<h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>不将每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响每一个子节点。</p>
<p>案例：将点击事件委托为父节点</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>子节点1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>子节点2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>子节点3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>子节点4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>子节点5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="常用鼠标事件"><a href="#常用鼠标事件" class="headerlink" title="常用鼠标事件"></a>常用鼠标事件</h2><p>禁用右键：contextmenu</p>
<p>禁止选中 ：selectstart</p>
<p><img src="https://cdn.linxueya.cn/img/shijian-mouse1.png"></p>
<p>案例：图片跟随鼠标移动</p>
<h2 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h2><p>onkeyup   键盘弹起</p>
<p>onkeydown   键盘按下</p>
<p>onkeypress    键盘按压  // 不识别功能键  但是KeyCode属性能区分大小写</p>
<p>执行顺序：down -&gt; press -&gt; up</p>
<p>案例：按下s 定位到搜索框</p>
<p>案例：文字放大镜</p>
<div class="note info">keydown 和 keypress 两个事件触发的时候，文字还没有落入文本框中。而且使用功能键时，keypress不响应</div>

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Web-APIs3</title>
    <url>/post/a53d5edd.html</url>
    <content><![CDATA[<ul>
<li><p><input disabled="" type="checkbox">  能够说出什么是BOM</p>
</li>
<li><p><input disabled="" type="checkbox">  能够知道浏览器的顶级对象window</p>
</li>
<li><p><input disabled="" type="checkbox">  能够写出页面加载事件及注意事项</p>
</li>
<li><p><input disabled="" type="checkbox">  能够说出JS的执行机制</p>
</li>
<li><p><input disabled="" type="checkbox">  能够使用location 对象完成页面之间的跳转</p>
</li>
<li><p><input disabled="" type="checkbox">  能够知晓navigator 对象涉及的属性</p>
</li>
<li><p><input disabled="" type="checkbox">  能够使用history提供的方法实现页面刷新</p>
</li>
</ul>
<h2 id="BOM概述"><a href="#BOM概述" class="headerlink" title="BOM概述"></a>BOM概述</h2><p>BOM即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window。BOM由一系列相关的对象构成，并且每个对象都提供了很多方法和属性。</p>
<p><img src="https://cdn.linxueya.cn/img/BOM-dif.png"></p>
<p><img src="https://cdn.linxueya.cn/img/BOM-desc.png"></p>
<p>window是浏览器的顶级对象，它具有双重角色。1. 它是JS访问浏览器窗口的一个接口。2. 它是一个全局对象。定义在全局作用域中的变量，函数都会变成window对象的属性和方法</p>
<!--window下的一个特殊属性 window.name-->

<h2 id="window对象的常见事件"><a href="#window对象的常见事件" class="headerlink" title="window对象的常见事件"></a>window对象的常见事件</h2><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h2 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h2><h2 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h2><h2 id="navigator-对象"><a href="#navigator-对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h2><h2 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h2>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
</search>
